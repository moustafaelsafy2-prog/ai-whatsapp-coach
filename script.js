function initUIEnhancements() { const userInput = document.getElementById('userInput'); if (!userInput) return; const adjustTextareaHeight = () => { userInput.style.height = 'auto'; userInput.style.height = userInput.scrollHeight + 'px'; }; userInput.addEventListener('input', adjustTextareaHeight); const originalSendMessage = App.core.sendMessage; App.core.sendMessage = function(...args) { originalSendMessage.apply(this, args); setTimeout(adjustTextareaHeight, 0); }; }

const App = {
  config: { MAX_PROMPT_CHARS: 28000, STORAGE_KEY: 'smart-coach-session-v3', LONG_PRESS_DURATION: 400, MAX_IMAGES: 5 },
  state: { userState: { step: 0, data: {} }, lang: 'ar', chatHistory: [], isRecording: false, sttSessionId: 0, recognition: null, mediaStream: null, mediaRecorder: null, audioChunks: [], recStartTime: 0, pendingImages: [], pinnedMessageId: null, longPressTimer: null, currentContextMenu: null, isEditing: false, editingMessageId: null },
  elements: {},
  cacheElements() {
    const $ = id => document.getElementById(id); this.elements = { chatMessages: $('chatMessages'), userInput: $('userInput'), sendBtn: $('sendBtn'), startBtn: $('startBtn'), nextBtn: $('nextBtn'), welcomeScreen: $('welcomeScreen'), userDataScreen: $('userDataScreen'), chatContainer: $('chatContainer'), userNameInput: $('userName'), userAgeInput: $('userAge'), userCountryInput: $('userCountry'), btnTheme: $('btnTheme'), plusBtn: $('plusBtn'), fileInput: $('fileInput'), micBtn: $('micBtn'), recHintWrap: $('recHintWrap'), recHint: $('recHint'), planButtonArea: $('planButtonArea'), generatePlanBtn: $('generatePlanBtn'), contactModal: $('contactModal'), closeContactBtn: $('closeContactBtn'), copyAndGoIherbBtn: $('copy-and-go-iherb-btn'), iherbCode: $('iherb-code'), imagePreviewsWrapper: $('imagePreviewsWrapper'), imagePreviewsContainer: $('imagePreviewsContainer'), chatAvatar: $('chatAvatar'), profileModal: $('profileModal'), closeProfileBtn: $('closeProfileBtn'), profileGetPlanBtn: $('profileGetPlanBtn'), resetBtn: $('resetBtn'), resetConfirmModal: $('resetConfirmModal'), confirmResetBtn: $('confirmResetBtn'), cancelResetBtn: $('cancelResetBtn'), messageContextMenu: $('messageContextMenu'), pinnedMessageArea: $('pinnedMessageArea'), pinnedText: $('pinnedText'), unpinBtn: $('unpinBtn'), footerRights: $('footerRights'), footerCoffee: $('footerCoffee'), imageViewerModal: $('imageViewerModal'), fullImageView: $('fullImageView'), closeImageViewerBtn: $('closeImageViewerBtn'), howToUseLink: $('howToUseLink'), howToUseModal: $('howToUseModal'), closeHowToUseBtn: $('closeHowToUseBtn'), howToUseTitle: $('howToUseTitle'), howToUseContent: $('howToUseContent'), howToUseText: $('howToUseText') };
  },
  i18n: {
    strings: {
      ar: {
        appName: 'ูุฏุฑุจู ุงูุดุฎุตู ุงูุฐูู', welcomeSubtitle: 'ุฌุงูุฒ ููุชุบููุฑุ ุฎุทุชู ูุตููุฉ ุฎุตุตูุง ูู โ ุชูููุฐ ูุญููุ ูุชุงุจุนุฉ ุฏูููุฉุ ููุชูุฌุฉ ููููุณุฉ.',
        startButtonText: 'ุงุจุฏุฃ ุงูุขู', userDataTitle: 'ููุจูู ูููู ุงูุณุฑูุน', userDataSubtitle: 'ูุญุชุงุฌ ุจุนุถ ุงููุนูููุงุช ููุจุฏุก',
        namePlaceholder:'ุงูุชุจ ุงุณูู ููุง', agePlaceholder:'ุนูุฑู', countryPlaceholder:'ุจูุฏู', nextButtonText:'ุงุจุฏุฃ ุงููุญุงุฏุซุฉ',
        inputPlaceholder:'ุงูุชุจ ุฑุณุงูุชู...', emptyFields:'ุงูุฑุฌุงุก ุฅุฏุฎุงู ุงุณูู ูุนูุฑู ูุจูุฏู ูููุชุงุจุนุฉ.', imageUpload:'ุชู ุงุณุชูุงู ุงูุตูุฑุฉ โ ูุชู ุงูุชุญููู ุงูุขู.',
        maxImagesReached: 'ูุง ุจุทูุ ุชูุฏุฑ ุชุฑูุน 5 ุตูุฑ ุจุณ ูู ุงููุฑุฉ ุงููุงุญุฏุฉ.',
        typing:'โฆ', recStart:'โ ุฌุงุฑู ุงูุชุณุฌููโฆ ุงุฑูุน ุฅุตุจุนู ููุฅุฑุณุงู', recDenied:'ุชุนุฐูุฑ ุงููุตูู ูููููุฑููููู.', recTooShort:'ุงูุชุณุฌูู ูุตูุฑ ุฌุฏูุง.', recSaved:'ุชู ูุณุฎ ุงูููุงู ุฅูู ุฎุงูุฉ ุงููุชุงุจุฉ.',
        ctaTitle: 'ุฌุงูุฒ ููุชูุฌุฉ ููููุณุฉุ', ctaSubtitle: 'ุฎุทุฉ ููุญููุฉ + ูุชุงุจุนุฉ ุฃุณุจูุนูุฉ.', getPlanButton: 'ุงุญุตู ุนูู ุฎุทุชู ุงูุขู',
        contactModalTitle: 'ุงุญุตู ุนูู ุฎุทุชู ุงูุขู', contactModalText1: 'ุงุฎุชุฑ ุงูุทุฑููุฉ ุงูููุงุณุจุฉ ููุชูุงุตู ุงููุจุงุดุฑ ูุน ุงููุฏุฑุจ.',
        whatsappBtnText: 'ูุงุชุณุงุจ', phoneBtnText: 'ุงุชุตุงู', copied: 'ุชู ุงููุณุฎ!',
        iherbTitle: 'ุงุญุตู ุนูู ููููุงุชู ูู iHerb', iherbSubtitle: 'ุฎุตู ุฅุถุงูู 10% ูุฏูุฉ ูู ูุฏุฑุจู!',
        copyAndGoButton: 'ุงุฐูุจ ูููุชุฌุฑ', iherbCopiedAndRedirecting: 'ุชู ูุณุฎ ุงูููุฏ! ูุชู ุงูุขู ุชุญูููู...',
        coffeeText: 'ูู ุฃุนุฌุจุชู ุงูุฃุฏุงุฉุ ุฏุนูู ูุณุงุนุฏูุง ุนูู ุงูุงุณุชูุฑุงุฑ.', coffeeBtnText: 'ุงุฏุนููู ุจูููุฉ', coffeeBtnText2: 'ุงุฏุนููู ุจูููุฉ',
        imageAttached: '[ุตูุฑ ูุฑููุฉ]', resetTitle: 'ุงุจุฏุฃ ูู ุฌุฏูุฏ',
        resetModalTitle: 'ุชุฃููุฏ ุงูุญุฐู', resetModalText: 'ูู ุฃูุช ูุชุฃูุฏ ุฃูู ุชุฑูุฏ ุญุฐู ูู ุงูุฑุณุงุฆู ูุงูุจุฏุก ูู ุฌุฏูุฏุ',
        resetCancelBtn: 'ุฅูุบุงุก', resetConfirmBtn: 'ููุงูู',
        contextCopy: 'ูุณุฎ', contextShare: 'ูุดุงุฑูุฉ', contextPin: 'ุชุซุจูุช', contextUnpin: 'ุฅูุบุงุก ุงูุชุซุจูุช',
        contextEdit: 'ุชุนุฏูู', contextDelete: 'ุญุฐู', messageDeleted: 'ุชู ุญุฐู ุงูุฑุณุงูุฉ.',
        unpinTitle: 'ุฅูุบุงุก ุงูุชุซุจูุช', sharedSuccessfully: 'ุชูุช ุงููุดุงุฑูุฉ ุจูุฌุงุญ!', shareFailed: 'ูุดูุช ุงููุดุงุฑูุฉ.',
        profileName: 'ุงููุงุจุชู ูุตุทูู ุงูุตุงูู', profilePhone: '', profileBioTitle: 'ุนูู',
        profileBioText: 'ุดุบูู ูู ููุฏุณุฉ ุงูุฃุฌุณุงู ูุงูุนููู. ูุฎุจูุฑ ุฏููู ูุนุชูุฏ ูู ูุงููููุฑููุงุ ุฃุฏูุฌ ุฃุญุฏุซ ุนููู ุงูููุงูุฉ ูุงูุชุบุฐูุฉ ูุน ููู ุนููู ูุฃุณููุจ ุญูุงุชูุ ูุฃุตูุน ูู ุชุญููุงู ุญููููุงู ููุณุชุฏุงูุงู. ูููุชู ููุณุช ูุฌุฑุฏ ุฎุทุฉุ ุจู ุจูุงุก ูุธุงู ุญูุงุฉ ูุทูู ุฃูุถู ูุณุฎุฉ ููู.',
        profileGetPlanBtn: 'ุงุญุตู ุนูู ุฎุทุชู',
        footerRights: 'ยฉ 2024 ุฌููุน ุงูุญููู ูุญููุธุฉ ูููุงุจุชู ูุตุทูู ุงูุตุงูู.',
        footerCoffee: 'ุงุฏุนููู ุจูููุฉ',
        howToUseText: 'ููู ุชุณุชุฎุฏู ุงูุฎุฏูุฉ',
        howToUseTitle: 'ุฏููู ุงุณุชุฎุฏุงู ุงููุฏุฑุจ ุงูุฐูู',
        howToUseContent: `<div class='space-y-3 text-sm'><p><strong>ุฃููุงู ุจู ูู ูุณุงุนุฏู ุงูุชุฏุฑูุจู ุงูุฐูู! ุฅููู ููููุฉ ุชุญููู ุฃูุตู ุงุณุชูุงุฏุฉ:</strong></p><ul class='list-disc list-inside space-y-2'><li><strong>ุจุฏุก ุงููุญุงุฏุซุฉ:</strong> ุฃุฏุฎู ุจูุงูุงุชู ุงูุฃูููุฉ ูุจุฏุก ุญูุงุฑ ูุฎุตุต ูุนู.</li><li><strong>ุฅุฑุณุงู ุงูุฑุณุงุฆู:</strong> ุงูุชุจ ุงุณุชูุณุงุฑู ูู ูุฑุจุน ุงููุต ูุงุถุบุท ุนูู ุฒุฑ ุงูุฅุฑุณุงู.</li><li><strong>ุฅุฑูุงู ุงูุตูุฑ:</strong> ุงุถุบุท ุนูู ุฃููููุฉ ุงููุดุจู ๐ ูุฅุฑูุงู ุตูุฑุฉ ูุงุญุฏุฉ ุฃู ุนุฏุฉ ุตูุฑ (ุญุชู 5 ุตูุฑ) ููุญูููุง ุงููุฏุฑุจ. ููููู ุฅุถุงูุฉ ูุต ูุน ุงูุตูุฑ.</li><li><strong>ุงูุฑุณุงุฆู ุงูุตูุชูุฉ:</strong> ุงุถุบุท ูุทููุงู ุนูู ุฃููููุฉ ุงููููุฑูููู ๐ค ููุชุณุฌููุ ุซู ุงุชุฑู ุฅุตุจุนู ููุฅุฑุณุงู.</li><li><strong>ุชุนุฏูู ุฃู ุญุฐู ุฑุณุงูุฉ:</strong> ุงุถุบุท ูุทููุงู ุนูู ุฃู ุฑุณุงูุฉ ุฃุฑุณูุชูุง ูุชุธูุฑ ูุงุฆูุฉ ุฎูุงุฑุงุช. ููููู ูู ุฎูุงููุง ุชุนุฏูู ุงูุฑุณุงูุฉ ุฃู ุญุฐููุง.</li><li><strong>ููุงุญุธุฉ ูุงูุฉ ุนูุฏ ุงูุชุนุฏูู:</strong> ุนูุฏ ุชุนุฏูู ุฃู ุฑุณุงูุฉุ ุณูุชู ุญุฐู ุฌููุน ุงูุฑุณุงุฆู ุงูุชู ุชูููุง (ูู ููููุฏุฑุจ) ูุณูุชู ุฅุฑุณุงู ุฑุฏ ุฌุฏูุฏ ุจูุงุกู ุนูู ุชุนุฏููู.</li><li><strong>ูุณุฎ ููุดุงุฑูุฉ:</strong> ููููู ุฃูุถุงู ูู ููุณ ุงููุงุฆูุฉ ูุณุฎ ูุต ุงูุฑุณุงูุฉ ุฃู ูุดุงุฑูุชูุง.</li></ul><p>ูุญู ููุง ููุณุงุนุฏุชู ูู ูู ุฎุทูุฉ ูุญู ูุฏูู!</p></div>`,
        welcomeMessage: 'ุฃูููุง ุจูู ูุง {name}ุ ูุนุงู ูุณุงุนุฏ ุงููุฏุฑุจ ุงูุฏููู ูุตุทูู ุงูุตุงูู. ุฌุงูุฒ ูุจุฏุฃ ุฑุญูุชูุ ุฅูู ูุฏูู ุงูุฃุณุงุณูุ',
      },
      en: {
        appName:'Smart Personal Coach', welcomeSubtitle:'Ready for a change? Your plan is tailored for youโprecise execution, close follow-up, and tangible results.',
        startButtonText:'Start Now', userDataTitle:"Let's build your quick profile", userDataSubtitle:"We need some information to get started",
        namePlaceholder:'Your Name', agePlaceholder:'Your Age', countryPlaceholder:'Your Country', nextButtonText:'Start Conversation',
        inputPlaceholder:'Type your messageโฆ', emptyFields:'Please enter your name, age, and country to continue.', imageUpload:'Image received โ analyzing now.',
        maxImagesReached: 'Heads up! You can only upload 5 images at a time.',
        typing:'โฆ', recStart:'โ Recordingโฆ release to send', recDenied:'Microphone access denied.', recTooShort:'Recording is too short.', recSaved:'Text copied to input.',
        ctaTitle: 'Ready for tangible results?', ctaSubtitle: 'Precise plan + weekly follow-up.', getPlanButton: 'Get Your Plan Now',
        contactModalTitle: 'Get your plan now', contactModalText1: 'Choose the best way to contact the coach directly.',
        whatsappBtnText: 'WhatsApp', phoneBtnText: 'Call', copied: 'Copied!',
        iherbTitle: 'Get your supplements from iHerb', iherbSubtitle: 'An extra 10% discount, a gift from your coach!',
        copyAndGoButton: 'Go to Store', iherbCopiedAndRedirecting: 'Code copied! Redirecting...',
        coffeeText: 'Did you like this free tool? Your support helps us to continue.', coffeeBtnText: 'Support me with a coffee', coffeeBtnText2: 'Support me with a coffee',
        imageAttached: '[Images Attached]', resetTitle: 'Start Over',
        resetModalTitle: 'Confirm Deletion', resetModalText: 'Are you sure you want to delete all messages and start over?',
        resetCancelBtn: 'Cancel', resetConfirmBtn: 'Confirm',
        contextCopy: 'Copy', contextShare: 'Share', contextPin: 'Pin', contextUnpin: 'Unpin',
        contextEdit: 'Edit', contextDelete: 'Delete', messageDeleted: 'Message deleted.',
        unpinTitle: 'Unpin message', sharedSuccessfully: 'Shared successfully!', shareFailed: 'Sharing failed.',
        profileName: 'Coach Mustafa Elsafy', profilePhone: '', profileBioTitle: 'About',
        profileBioText: "My passion is engineering bodies and minds. As an internationally certified expert from California, I merge the latest in fitness and nutrition science with a deep understanding of your lifestyle to create real, sustainable transformation. My mission isn't just a plan; it's to build a lifestyle system that unleashes the best version of you.",
        profileGetPlanBtn: 'Get Your Plan',
        footerRights: 'ยฉ 2024 All rights reserved for Coach Mustafa Elsafy.',
        footerCoffee: 'Support me with a coffee',
        howToUseText: 'How to use',
        howToUseTitle: 'Smart Coach Guide',
        howToUseContent: `<div class='space-y-3 text-sm'><p><strong>Welcome to your smart training assistant! Here's how to get the most out of it:</strong></p><ul class='list-disc list-inside space-y-2'><li><strong>Start Conversation:</strong> Enter your initial data to begin a personalized chat.</li><li><strong>Send Messages:</strong> Type your query in the text box and press the send button.</li><li><strong>Attach Images:</strong> Click the paperclip icon ๐ to attach one or more images (up to 5) for the coach to analyze. You can add text with the images.</li><li><strong>Voice Messages:</strong> Press and hold the microphone icon ๐ค to record, then release to send.</li><li><strong>Edit or Delete a Message:</strong> Long-press on any message you've sent to bring up an options menu. From there, you can edit or delete the message.</li><li><strong>Important Note on Editing:</strong> When you edit a message, all subsequent messages (from both you and the coach) will be deleted, and a new response will be generated based on your edit.</li><li><strong>Copy & Share:</strong> From the same menu, you can also copy the message text or share it.</li></ul><p>We're here to help you every step of the way towards your goal!</p></div>`,
        welcomeMessage: "Welcome, {name}! I'm assistant to international coach Mustafa Elsafy. Ready to start your journey? What's your main goal?",
      }
    },
    setLang(lang) {
      App.state.lang = lang;
      document.documentElement.lang = lang;
      document.documentElement.dir = lang === 'ar' ? 'rtl' : 'ltr';
      const L = App.i18n.strings[lang];
      const $ = id => document.getElementById(id);
      const updateText = (elId, key) => { const el = $(elId); if (el) el.textContent = L[key]; };
      const updatePlaceholder = (elId, key) => { const el = $(elId); if (el) el.placeholder = L[key]; };
      const updateTitle = (elId, key) => { const el = $(elId); if (el) el.title = L[key]; };
      const updateHtml = (elId, key) => { const el = $(elId); if (el) el.innerHTML = L[key]; };
      
      updateText('welcomeTitle', 'appName'); updateText('welcomeSubtitle', 'welcomeSubtitle'); updateText('startBtn', 'startButtonText');
      updateText('userDataTitle', 'userDataTitle'); updateText('userDataSubtitle', 'userDataSubtitle');
      updatePlaceholder('userName', 'namePlaceholder'); updatePlaceholder('userAge', 'agePlaceholder'); updatePlaceholder('userCountry', 'countryPlaceholder');
      updateText('nextBtn', 'nextButtonText'); updateText('chatTitle', 'appName'); updatePlaceholder('userInput', 'inputPlaceholder');
      updateText('contactModalTitle', 'contactModalTitle'); updateText('contactModalText1', 'contactModalText1');
      updateText('whatsappBtnText', 'whatsappBtnText'); updateText('phoneBtnText', 'phoneBtnText');
      updateText('coffeeText', 'coffeeText'); updateText('coffeeBtnText', 'coffeeBtnText'); updateText('coffeeBtnText2', 'coffeeBtnText2');
      updateText('ctaTitle', 'ctaTitle'); updateText('ctaSubtitle', 'ctaSubtitle'); updateText('generatePlanBtn', 'getPlanButton');
      updateText('iherbTitle', 'iherbTitle'); updateText('iherbSubtitle', 'iherbSubtitle');
      updateText('copy-and-go-iherb-btn-text', 'copyAndGoButton');
      updateTitle('resetBtn', 'resetTitle'); updateText('resetModalTitle', 'resetModalTitle');
      updateText('resetModalText', 'resetModalText'); updateText('cancelResetBtn', 'resetCancelBtn');
      updateText('confirmResetBtn', 'resetConfirmBtn');  
      updateText('contextCopy', 'contextCopy'); updateText('contextShare', 'contextShare'); updateText('contextPin', 'contextPin');
      updateText('contextEdit', 'contextEdit'); updateText('contextDelete', 'contextDelete');
      updateTitle('unpinBtn', 'unpinTitle');
      updateText('profileName', 'profileName'); updateText('profilePhone', 'profilePhone');
      updateText('profileBioTitle', 'profileBioTitle'); updateText('profileBioText', 'profileBioText');
      updateText('profileGetPlanBtn', 'profileGetPlanBtn');
      updateText('footerRights', 'footerRights');
      updateText('footerCoffee', 'footerCoffee');
      updateText('howToUseText', 'howToUseText');
      updateText('howToUseTitle', 'howToUseTitle');
      updateHtml('howToUseContent', 'howToUseContent');

      document.querySelectorAll('.lang-toggle-btn').forEach(btn => { btn.textContent = lang === 'ar' ? 'EN' : 'AR'; });
      document.title = `${L.appName} | Smart Personal Coach`;
    },
    autoSetByText(s) { if (!s) return; const isArabic = /[\u0600-\u06FF]/.test(s); if ((isArabic ? 'ar' : 'en') !== App.state.lang) { this.setLang(isArabic ? 'ar' : 'en'); } }
  },
  utils: {
    setTheme() { document.documentElement.classList.toggle('dark'); const isDark = document.documentElement.classList.contains('dark'); App.elements.btnTheme.textContent = isDark ? '๐' : 'โ๏ธ'; localStorage.setItem('theme', isDark ? 'dark' : 'light'); },
    toast(msg) { const t = document.createElement('div'); t.className = 'toast'; t.textContent = msg; document.body.appendChild(t); setTimeout(() => t.classList.add('show'), 10); setTimeout(() => { t.classList.remove('show'); setTimeout(() => t.remove(), 400); }, 2400); },
    removeNode(node) { if (node && node.parentNode) node.parentNode.removeChild(node); },
    formatTime(timestamp) { return new Date(timestamp).toLocaleTimeString(App.state.lang === 'ar' ? 'ar-EG' : 'en-US', { hour: 'numeric', minute: '2-digit', hour12: true }); }
  },
  ui: {
    displayMessage(message) {
        const { chatMessages } = App.elements;
        const bubble = document.createElement('div');
        const sender = message.role === 'assistant' ? 'ai' : 'user';
        
        bubble.className = `message-bubble ${sender}`;
        bubble.dataset.messageId = message.id;

        let finalHtml = '';

        if (message.role === 'user' && message.images && message.images.length > 0) {
            const imageContainer = document.createElement('div');
            imageContainer.className = 'flex flex-wrap gap-2 mb-2';
            message.images.forEach(imgDataUrl => {
                const img = document.createElement('img');
                img.src = imgDataUrl;
                img.className = 'max-w-[100px] h-auto rounded-lg cursor-pointer';
                img.alt = 'uploaded image';
                img.onclick = () => App.handlers.handleViewImage(imgDataUrl);
                imageContainer.appendChild(img);
            });
            finalHtml += imageContainer.outerHTML;
        }

        const content = message.parts?.[0]?.text || '';
        const safeContent = (content && typeof content === 'string') ? content : '';
        if (safeContent) {
            finalHtml += `<div class="msg-content">${marked.parse(safeContent)}</div>`;
        }

        const timeHtml = `<div class="message-meta"><span class="message-time">${App.utils.formatTime(message.timestamp)}</span></div>`;
        bubble.innerHTML = finalHtml + timeHtml;
        
        chatMessages.appendChild(bubble);
        chatMessages.scrollTop = chatMessages.scrollHeight;

        App.handlers.addMessageEventListeners(bubble);
        return bubble;
    },
    showTyping(sender = 'ai') { const { chatMessages } = App.elements; const bubble = document.createElement('div'); bubble.className = `message-bubble ${sender}`; bubble.innerHTML = `<div class="typing"><div class="dot"></div><div class="dot"></div><div class="dot"></div></div>`; chatMessages.appendChild(bubble); chatMessages.scrollTop = chatMessages.scrollHeight; return bubble; },
    togglePlanCTA() { const isDataComplete = ['name', 'age', 'country'].every(k => !!App.state.userState.data[k]); if(App.elements.generatePlanBtn) { App.elements.generatePlanBtn.disabled = !isDataComplete; } },
    rebuildChatUI() { App.elements.chatMessages.innerHTML = ''; App.state.chatHistory.forEach(message => this.displayMessage(message)); },
    updatePinnedMessageUI() {
        const { pinnedMessageArea, pinnedText } = App.elements;
        if (App.state.pinnedMessageId) {
            const pinnedMessage = App.state.chatHistory.find(m => m.id === App.state.pinnedMessageId);
            if (pinnedMessage) {
                const textContent = pinnedMessage.parts[0].text.replace(/\[Image Attached\]/g, '๐ท');
                pinnedText.textContent = textContent;
                pinnedMessageArea.classList.add('show');
                return;
            }
        }
        pinnedMessageArea.classList.remove('show');
        App.state.pinnedMessageId = null;  
    },
    renderImagePreviews() {
        const container = App.elements.imagePreviewsContainer;
        const wrapper = App.elements.imagePreviewsWrapper;
        container.innerHTML = '';

        if (App.state.pendingImages.length === 0) {
            wrapper.classList.add('hidden');
            return;
        }

        App.state.pendingImages.forEach(image => {
            const thumbWrapper = document.createElement('div');
            thumbWrapper.className = 'preview-thumbnail';
            
            const img = document.createElement('img');
            img.src = image.dataUrl;
            img.alt = 'Preview';
            img.onclick = () => App.handlers.handleViewImage(image.dataUrl);

            const removeBtn = document.createElement('button');
            removeBtn.className = 'remove-btn';
            removeBtn.innerHTML = 'ร';
            removeBtn.setAttribute('aria-label', 'Remove image');
            removeBtn.onclick = () => App.handlers.handleRemoveImage(image.id);

            thumbWrapper.appendChild(img);
            thumbWrapper.appendChild(removeBtn);
            container.appendChild(thumbWrapper);
        });

        wrapper.classList.remove('hidden');
    },
    setLoading(isLoading) {
        const { userInput, sendBtn, plusBtn, micBtn } = App.elements;
        userInput.disabled = isLoading;
        sendBtn.disabled = isLoading;
        plusBtn.disabled = isLoading;
        micBtn.disabled = isLoading;
        
        if (isLoading) {
            sendBtn.innerHTML = `<div class="w-5 h-5 border-2 border-white/50 border-t-white rounded-full animate-spin"></div>`;
        } else {
            this.setEditing(false);
        }
    },
    setEditing(isEditing) {
        const { sendBtn } = App.elements;
        if(isEditing) {
            sendBtn.innerHTML = `<svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>`;
            sendBtn.classList.add('!bg-blue-500');
        } else {
            sendBtn.innerHTML = `<svg class="w-5 h-5" style="transform: translateX(1px);" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"></path></svg>`;
            sendBtn.classList.remove('!bg-blue-500');
        }
    }
  },
  services: {
    async callAI(payload) {
        try {
            const res = await fetch('/api/generate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            
            if (!res.ok) {
                const errorData = await res.json().catch(() => ({ error: "Failed to parse error response from server." }));
                throw new Error(errorData.error || `HTTP error! status: ${res.status}`);
            }
            
            const data = await res.json();
            return data.text || '';
        } catch (e) {
            console.error("AI Call Error:", e);
            return (App.state.lang === 'ar') ? 'ุนุฐุฑูุงุ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุงุชุตุงู ุจุงูุฎุงุฏู.' : 'Sorry, an error occurred while connecting to the server.';
        }
    },
    speech: { supportSpeechRecognition: () => ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window), startLocalRecognition() { const SR = window.SpeechRecognition || window.webkitSpeechRecognition; if (!SR) return null; const sessionId = ++App.state.sttSessionId; const rec = new SR(); rec.lang = (App.state.lang === 'ar' ? 'ar-EG' : 'en-US'); rec.interimResults = true; rec.continuous = true; rec.onresult = (e) => { if (sessionId !== App.state.sttSessionId) return; let final = '', interim = ''; for (let i = e.resultIndex; i < e.results.length; i++) { if (e.results[i].isFinal) { final += e.results[i][0].transcript; } else { interim = e.results[i][0].transcript; } } const text = (final || interim).trim(); if (text) { App.elements.userInput.value = text; App.elements.userInput.dispatchEvent(new Event('input')); } }; rec.start(); return { rec, sessionId }; }, async startRecording() { if (App.state.isRecording) return; App.state.isRecording = true; const L = App.i18n.strings[App.state.lang]; if (this.supportSpeechRecognition()) { const h = this.startLocalRecognition(); App.state.recognition = h?.rec || null; } else { App.utils.toast(L.recDenied); App.state.isRecording = false; return; } App.elements.micBtn.classList.add('mic-live'); App.elements.recHintWrap.classList.remove('hidden'); App.elements.recHint.textContent = L.recStart; }, stopRecording() { if (!App.state.isRecording) return; App.state.isRecording = false; if (App.state.recognition && App.state.recognition.stop) { try { App.state.recognition.stop(); App.core.sendMessage(); } catch (_) {} App.state.recognition = null; } App.elements.micBtn.classList.remove('mic-live'); App.elements.recHintWrap.classList.add('hidden'); App.state.sttSessionId++; } }
  },
  prompts: {
    buildCoachSystemPrompt() {
      return `๐ ุงูุชูุฌูู ุงูุชูููุฐู ุงูููุงุฆู โ ูุฏุฑุจ ุนุงููู ร ุฎุจูุฑ ุชุบุฐูุฉ ร ุฎุจูุฑ ููููุงุช

          โธป

          ๐ฏ ุงููููุฉ ุงูุฑุฆูุณูุฉ
              โข ุฃู ุชููู ุงููุณุงุนุฏ ุงูุดุฎุตู ุงูุงุญุชุฑุงูู ููุนููู ุจุงูููุงุจุฉ ุนู ุงููุฏุฑุจ ูุตุทูู ุงูุตุงููุ ูุนูุณูุง ุฃุนูู ูุณุชููุงุช ุงูุฏูุฉ ูุงูุงุญุชุฑุงููุฉ ูุชุนุฒูุฒ ุงูุซูุฉ ูู ุงูุฃุฏุงุฉ.
              โข ุชูุฏูู ุฎุฏูุฉ ุดุงููุฉ ููุฎุตุตุฉ ุจูุณุจุฉ 100% ุจุนุฏ ุฌูุน ุงูุจูุงูุงุช ุงููุงุฒูุฉ ุชุดูู:
              โข ุฅุนุฏุงุฏ ุฎุทุท ุชุฏุฑูุจ ูุชุบุฐูุฉ ุฏูููุฉ ููุบุงูุฉ.
              โข ุงุณุชุฎุฏุงู ุฃุฏู ุงูุฃุฏูุงุช ุงูุนูููุฉ ูุญุณุงุจ ุงูุณุนุฑุงุช ูุงููุงูุฑูุฒ: Mifflin-St Jeor, Harris-Benedict, Katch-McArdle.
              โข ุงุณุชุฎุฏุงู ุฃุฏูุงุช ุงูุชูุฑูู ุงููุชูุฏูุฉ ูุซู RPE ู1RM Estimation (Epley, Brzycki) ูุถุจุท ุงูุฃุญูุงู ูุงูุดุฏุฉ.
              โข ุชุฑุดูุญ ููููุงุช ุบุฐุงุฆูุฉ ุขููุฉ ููุนูุงูุฉ ูุชู ุงุฎุชูุงุฑูุง ููุท ุจูุงุกู ุนูู ุจูุงูุงุช ุงูุนููู (ุงูุฃูุฏุงูุ ุงูุฃูุฑุงุถุ ุงูุญุงูุฉ ุงูุตุญูุฉุ ููุท ุงูุญูุงุฉ).
              โข ุงูุฑุฏ ุนูู ุฌููุน ุงูุงุณุชูุณุงุฑุงุช ุจุฃุณููุจ ุจุดุฑู ุทุจูุนู ูุงุญุชุฑุงูู ุฏูู ุฃู ุทุงุจุน ุขูู.

          โธป

          ๐งโ๐คโ๐ง ุงููููุฉ ูุงูุดุฎุตูุฉ
              โข ุงูุฃุณููุจ: ูุฏุฑุจ ุนุงููู + ุฃุฎุตุงุฆู ุชุบุฐูุฉ + ุฎุจูุฑ ููููุงุช .
              โข ุงูููุฌุฉ: ูุตุฑูุฉุฅุญุชุฑุงููุฉ ูุน ูุฑููุฉ ูู ุงูุชููู ุญุณุจ ุฃุณููุจ.
              โข ุงูุฑุฏ ุนูู ุงููุณุชุฎุฏู ุจููุณ ุงููุบุฉ ุงูุชู ููุชุจ ุจูุง ุณูุงุก ูุงูุช ุนุฑุจูุฉ ุฃู ุฅูุฌููุฒูู.
              โข ุงูููููุนุงุช:
              โข ุนุฏู ุฅุธูุงุฑ ุฃูู ุฐูุงุก ุงุตุทูุงุนู ุชุญุช ุฃู ุธุฑู.
              โข ุนุฏู ุงูุจุฏุก ุจุฑุฏูุฏ ุนุงูุฉ ุฃู ุณุทุญูุฉ.
              โข ุนุฏู ุชูุฑุงุฑ ููุงู ุงูุนููู ุฃู ุฅุนุงุฏุฉ ุตูุงุบุชู ุจููุณ ุงูุดูู.
              โข  ุนุฏู ุฐูุฑ ุงุณู ุงูุนููู ุจุดูู ูุณุชูุฑุฅุทูุงููุง  ููุท ุงุฐุง ูุงู ุณูุงู ุงูููุงู ูุณูุญ ุจุฐูู.
              โข ุชุฌูุจ ุงูุนุจุงุฑุงุช ุงูุฌุงูุฒุฉ ูุซู โูุฏู ุฑุงุฆุนโ ุฃู โููุชุงุฒ ุฌุฏูุงโ.
              โข ุงูุฑุฏูุฏ: ูุตูุฑุฉุ ูููุฉุ ูุชููุนุฉุ ุทุจูุนูุฉ 100%ุ ุบููุฉ ุจุงูููุฑุฏุงุชุ ูุชุฑุงุนู ุณูุงู ุงููุญุงุฏุซุฉ.

          โธป

          ๐ ููุงุนุฏ ุฌูุน ุงูุจูุงูุงุช
              โข ูุง ูุชู ุฅุนุฏุงุฏ ุฃู ุฎุทุฉ ูุจู ุงูุชูุงู ุงูููู ุงูุจูุงูู ููุนููู.
              โข ูุงุนุฏุฉ ุตุงุฑูุฉ: ูุง ุชุณุฃู ุฃูุซุฑ ูู ุณุคุงู ูุงุญุฏ ูู ูู ูุฑุฉ. ุงุณุชุซูุงุก: ูููู ุทุฑุญ ุณุคุงููู ููุท ุฅุฐุง ูุงูุง ูุฑุชุจุทูู ุจุจุนุถููุง ุงูุจุนุถ ุจุดูู ูุจุงุดุฑ (ูุซุงู: ูุง ูู ูุฒูู ูุทูููุ).
              โข ุนูุฏ ุธููุฑ ุฃู ุดูุก ุบูุฑ ุทุจูุนู ุฃู ุณููู ุฎุงุทุฆ ูู ุงูุฃูู ุฃู ุงูููู ุฃู ุงูุชุฏุฑูุจ โ ูุชู ุงูุชุนูู ููู ุจุฃุณุฆูุฉ ุฅุถุงููุฉ ูุชุญููู ููุตู.
              โข ุงููุฏู ูู ุงูููู ุงููุงูู ูููุณ ูุฌุฑุฏ ุฌูุน ุจูุงูุงุช.
              โข ุฅุฐุง ุชุฌุงูู ุงูุนููู ุณุคุงููุงุ ุชุชู ุฅุนุงุฏุฉ ุตูุงุบุชู ูุทุฑุญู ุจูุทู.
              โข ุฏุงุฆููุง ูุชู ุชุฐููุฑ ูุง ููู ุณุงุจููุง ูุนุฏู ุฅุนุงุฏุฉ ููุณ ุงูุณุคุงู ูุฑุฉ ุฃุฎุฑู.
              โข ููุงูุดู ุงูุชุญุฏูุงุช ุงูุตุญูู ูุงูุงุตุงุจุงุช ููุดุงูู ุงูููู ูุงูููู ูุงูุชูุชุฑ ุถุฑูุฑู ููุนุงูุฌุฉ ูุฐู ุงูุชุญุฏูุงุช.
              

          ุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ ุงููุทููุจุฉ:
              โข ุงููุฏู ุงูุฑุฆูุณู + ุงููุฏุฉ ุงูุฒูููุฉ + ูุคุดุฑุงุช ุงููุฌุงุญ.
              โข ุงููุฒูุ ุงูุทููุ ุงูุนูุฑุ ุงูุฌูุณ.
              โข ูุณุชูู ุงููุดุงุท ูููุท ุงูุญูุงุฉ + ูุชูุณุท ุงูุฎุทูุงุช ุงูููููุฉ.
              โข ุจูุฆุฉ ุงูุชุฏุฑูุจ (ุฌูู/ููุฒู)ุ ุนุฏุฏ ุงูุฃูุงูุ ุงููุฏุฉุ ุงูุฎุจุฑุฉุ ุงูุฃุฏูุงุช ุงููุชุงุญุฉ.
              โข ูุณุชูู ุงููุงูุฉ ุงูุจุฒููุฉ ููุฏู ูุนุฑูุชู ุจุงูุชูุงุฑูู.
              โข ุงูุชุงุฑูุฎ ุงูุตุญู (ุฅุตุงุจุงุชุ ุฃูุฑุงุถุ ุนูููุงุชุ ุฃุฏููุฉ).
              โข ุงุฎุชูุงุฑู ููุงุณุงุช ุงูุฌุณู + ุตูุฑ ุฃู InBody .
              โข ุงููุคุดุฑุงุช ุงูุญูููุฉ (ุถุบุทุ ุณูุฑุ ุฏููู ุงูุฏูุ ูุธุงุฆู ุงููุจุฏ ูุงูููููุ ููุชุงูููุงุช).
              โข ุฌูุฏุฉ ุงูููู ูููุงุนูุฏู.
              โข ูุณุชูู ุงูุถุบุท ุงูููุณูุ ุงูุณูุฑ ุงููุชูุฑุฑุ ุทุจูุนุฉ ุงูุนูู.
              โข ุงูุนุงุฏุงุช ุงูุบุฐุงุฆูุฉ (ูุฌุจุงุชุ ูุงุกุ ูุงููููโฆ).
              โข ูุดุงูู ุงููุถู ูุงูุชุญูู ุงูุบุฐุงุฆู.
              โข ุงูุชูุถููุงุช ูุงููููุฏ ุงูุบุฐุงุฆูุฉ.
              โข ุงูููุฒุงููุฉ ููุทุนุงู ูุงูููููุงุช.
              โข ุฅููุงูุงุช ุงููุทุจุฎ/ุงูุทูู.
              โข ูู ููุถู ุงูุนููู ุงุณุชุฎุฏู ุงูุตูุตุงุช ูุงูุงุถุงูุงุช  ุนูู ุงูุทุนุงู
              โข ุทุฑู ุงูุชุชุจุน ุงูููุถูุฉ (ุชุทุจููุงุชุ ููุงุฒููโฆ).
              โข ุงูุชุฌุงุฑุจ ุงูุณุงุจูุฉ ูุน ุงูุฃูุธูุฉ.
              โข ุงูุฃููููุงุช ุงูุชุฏุฑูุจูุฉ.
              โข ุงุฎุชูุงุฑู ุฎุทุฉ ุงูููุงุณ ูุงููุชุงุจุนุฉ (ูุฒูุ ุตูุฑุ ููุงุณุงุช ุฃุณุจูุนูุฉ).
              โข ุงูุนุถูุงุช ุงูุชู ุชุญุชุงุฌ ุฏุนู ูุจูุง ุถุนู ููุญุชุงุฌ ุงูุนููู ุงูุชุฑููุฒ ุนููู.
              โขุณุคุงู ุงูุนููู ุนู ุงููุฏุฉ ุงูุฒูููู ุงูุชู ูุฑุบุจ ุจุงููุตูู ููุฏูู.
              โข ูู ููุงู ููุงุณุจุงุช ูุนููู ูุงุฏูู.
              โข ุงูุญุงูู ุงูุฅุฌุชูุงุนูู ูุชุฒูุฌ ุงุนุฒุจ ููู ููุงู ูุดุงูู ุชุญุชุงุฌ ุฏุนู.
              ูู ุฏุงุฆูุง ููุงูุดู ุฃู ุดุฆ ุบูุฑ ุทุจูุนู ูุน ุงูุนููู ูุถูุงู ูููู ููุชูุงุตูู

          โธป

          ๐ฃ๏ธ ุงูุณููุงุฑูู ุงูุฅุฑุดุงุฏู
              โข ุงูุชุชุงุญูุฉ ุทุจูุนูุฉ ุชูุงุณุจ ุงููููู.
              โข ุฑุฏ ูุตูุฑ ูุญูุฒ ุจุนุฏ ูู ุฅุฌุงุจุฉ.
              โข ุงูุชูุฑุน ุงูููุทูู ูู ุงูุฃุณุฆูุฉ ุญุณุจ ุงูุญูุงุฑ.
              โข ุฅุนุงุฏุฉ ุตูุงุบุฉ ุงูุฃุณุฆูุฉ ุงูููููุฉ ุจุทุฑููุฉ ูุจูุฉ.
              โข ุฅุถุงูุฉ ุฃุณุฆูุฉ ุฅุถุงููุฉ ุฏุงุฆููุง ุญุณุจ ูุง ููุดูู ุงูุญูุงุฑ (ูููุ ุฅุตุงุจุงุชุ ุนุงุฏุงุช ุณูุฆุฉโฆ).
              โข ุงูุฑุฏูุฏ ูุชุบูุฑุฉ ุฏุงุฆููุง ููุง ุชุชุจุน ููุณ ุงูุฃุณููุจ ุฃู ุงูุชุฑุชูุจ.

          โธป

          ๐ ูุฑุญูุฉ ูุง ูุจู ุฅุนุฏุงุฏ ุงูุฎุทุฉ
              โข ูุจู ุชุฌููุฒ ุงูุฎุทุฉ: ูุชู ุงุณุชุฑุฌุงุน ูู ุงูุจูุงูุงุช ูู ุฑุณุงูุฉ ูุฑุงุฌุนุฉ ุดุงููุฉ ุชููุชุจ ุจุฃุณููุจ ุนุจูุฑู ูุงุญุชุฑุงููุ ูููุทูุจ ูู ุงูุนููู ุชุฃููุฏูุง.
              โข ุจุนุฏ ุงูุชุฃููุฏ: ุชูุณุชุฎุฏู ุฌููุน ุงูุจูุงูุงุช ููุง ูู ุจุงููุงูู ูุฏูู ุฃู ุงุฎุชุตุงุฑ ูุชุตููู ุงูุฎุทุฉ.

          ุจุนุฏ ุฌูุน ูู ุงูุจูุงูุงุช:
              1. ุณุคุงู ุนู ุงูููููุงุช:
              โข ุชูุฑุดูุญ ุงูููููุงุช ุจุดูู ูุฎุตุต 100% ุจูุงุกู ุนูู ุงูุจูุงูุงุช (ุงูุฃูุฏุงูุ ุงูุฃูุฑุงุถุ ุงูุญุงูุฉ ุงูุตุญูุฉ).
              โข ุนูุฏ ููุงููุฉ ุงูุนููู ุนูู ุดุฑุงุก ูู iHerb: ูุชู ุชูุฏูู ููุฏ ุฎุตู AYT3413 ูุฑุฉ ูุงุญุฏุฉ ููุทุ ุจุฃุณููุจ ุฐูู ูุบูุฑ ูุฒุนุฌ.
              2. ุทูุจ ุตูุฑ ุฃู ุชุญููู InBody ูุฒูุงุฏุฉ ุงูุฏูุฉ ุงุฐุง ุชููุฑุช.

          โธป

          ๐ ุฅุนุฏุงุฏ ูุชุณููู ุงูุฎุทุฉ
              โข ููุฑูุง ุจุนุฏ ุชุฃููุฏ ุงูุนููู ุนูู ููุฎุต ุงูุจูุงูุงุชุ ูุชู ุชูุฏูู ุงูุฎุทุฉ ุงููุงููุฉ ุฏูู ุฃู ุชุฃุฎูุฑ.
              โข ุงูุฎุทุฉ ุงูุชุฏุฑูุจูุฉ:
              โข ููุธูุฉ ุจุงูุฃูุงู.
              โข ุงูุชูุงุฑูู ุจุงูุนุฑุจูุฉ + ุงูุฅูุฌููุฒูุฉ.
              โข ุชุบุทูุฉ ูู ุนุถูุงุช ุงูุฌุณู ุจุงููุงูู 
              โข ุฏูุฌ ุชูุงุฑูู ุงููุงุฑุฏูู ุงุฐุง ูุงู ุงูุนููู ูุญุชุงุฌ ุงูู ุฐูู 
              โข Sets ร Reps ร Rest ูุญุณูุจุฉ ุจุฏูุฉ ุจุงุณุชุฎุฏุงู RPE ู1RM Estimation.
              โข ุงูุฎุทุฉ ุงูุบุฐุงุฆูุฉ:
              โข ุณุนุฑุงุช ููุงูุฑูุฒ ุฏูููุฉ ุฌุฏูุง ุจุงุณุชุฎุฏุงู Mifflin-St Jeor, Harris-Benedict, Katch-McArdle.
              โข ูุฌุจุงุช ููููุฉ ููุตูุฉ ุจุงููููุงุช ูุงูุจุฏุงุฆู.
              โข ุงูุงุถุงูุงุช ุงูุชู ููุถู ุงูุนููู ุงุถุงูุชูุง ุนูู ุงูุทุนุงู ุงู ุงุฑุงุฏ ุฐูู.
              โข ุชูุถูุญ ููููุงุช ูู ูุฌุจุฉ ุจุดูู ููุตู 
              โข ูุฑุงุนุงุฉ ุงูุญุณุงุณูุฉ ูุงููุดููุงุช ุงูุตุญูุฉ ูุงููุฌุจุงุช ุงูุชู ูุง ููุถููุง ุงูุนููู ุจุนุฏู ุงุฏุฑุงุฌูุง ุงุจุฏุง
              โข ุงูููููุงุช:
              โข ุชูุตู ุงูููููุงุช ุจูุงุก ุนูู ุงููุฏู ูุงูุญุงูู ุงูุตุญูุฉ ูุงูููู ูุงูููู ูุงูุชูุชุฑ ูุงูุงุตุงุจุงุช ูุงู ุดุฆ ุงุฎุฑ ูุญุชุงุฌ ุงูู ุฐูู.
              โข ุงุฐุง ูุงู ุงูุนููู ููุงุฌู ูุดุงูู ุฌูุณูู ูุชู ุฏุนูู ุจุงูููููุงุช ุงูููุงุณุจู
              โข ุงูููููุงุช ูุฌุจ ุงู ุชููู ุฃููู ููุง ุชุชุนุงุฑุถ ูุน ุจุนุถูุง ุงู ูุน ุงุฏููู ูุณุชุฎุฏููุง ุงููุณุนููู
              โข ูุฏูุฌุฉ ุจุฐูุงุก ุจูุงุกู ุนูู ุงูุจูุงูุงุช ุงูุตุญูุฉ.
              โข ููุงุฆุฏูุง ููุถุญุฉ ูุน ุชุฑู ุงููุฑุงุฑ ุงูููุงุฆู ููุนููู.
              โข ุฅุฏุฑุงุฌ ููุฏ ุงูุฎุตู AYT3413 ูุฑุฉ ูุงุญุฏุฉ ููุท ูุจุฃุณููุจ ูุจู ูุบูุฑ ุฏุนุงุฆู.
              โข ูู ููุงูุฉ ุงูุฎุทุฉ:
              โข ุงูุชุฑุงุญ ูุชุงุจุนุฉ ุฎุงุตุฉ ุฃุณุจูุนูุฉ ููุชุนุฏููุงุช ูุงูุชูุฌููุ ุนุจุฑ ุฒุฑ โุงุญุตู ุนูู ุฎุทุชู ุงูุขูโ โ ุจุฃุณููุจ ุทุจูุนู ุบูุฑ ูุฒุนุฌ.

          โธป

          ๐ฌ ุชุญููู ุงูุจูุงูุงุช ูุงูุตูุฑ
              โข ุนูุฏูุง ูุฑุณู ุงููุณุชุฎุฏู ุตูุฑุฉ (ุฃู ุตูุฑูุง ูุชุนุฏุฏุฉ)ุ ูู ุจุชุญููููุง ุจุฏูุฉ ููุฏุฑุจ ุฎุจูุฑ.
              โข ุงููุฏู: ุงุณุชุฎูุงุต ููุงุญุธุงุช ุนูููุฉ ุญูู ุชูููู ุงูุฌุณูุ ุงููุถุนูุฉุ ุงูุชูุฒูุน ุงูุนุถูู ูุงูุฏูููุ ูุชุญุฏูุฏ ููุงุท ุงูููุฉ ูุงููุฌุงูุงุช ุงูุชู ุชุญุชุงุฌ ุฅูู ุชุญุณูู.
              โข ุฅุฐุง ูุงูุช ููุงู ุจูุงูุงุช (ูุซู InBody)ุ ุงุณุชุฎุฑุฌ ุงูููุงููุณ ุงูุฑุฆูุณูุฉ ููุณุฑูุง.
              โข **ุงูุฃูู:** ูุง ุชูุฏู ุงูุชุญููู ุนูู ุดูู ุชูุฑูุฑ ุฃู ูุงุฆูุฉ ููุงุท ูููุตูุฉ. ูุฌุจ ุฏูุฌ ููุงุญุธุงุชู ุจุณูุงุณุฉ ูุทุจูุนูุฉ ูู ุตูุจ ุฑุฏู ุงูุญูุงุฑู. ุงุฌุนู ุงูุฃูุฑ ูุจุฏู ููุฃูู ูุฏุฑุจ ุญูููู ูุนูู ุนูู ุงูุตูุฑ ุงูุชู ุฃูุงูู.
              โข ูุซุงู ููุฃุณููุจ ุงููุทููุจ: "ุชูุงู ุดูุช ุงูุตูุฑุ ูุจุฏุฆููุง ุนูุฏู ุจูุงุก ุนุถูู ูููุณ ูู ููุทูุฉ ุงูุฃูุชุงู ูุฏู ููุฏููุง ุดูู V-shape ููุชุงุฒ. ุจุณ ูุญุชุงุฌูู ูุฑูุฒ ุงููุชุฑุฉ ุงูุฌุงูุฉ ุนูู ุชูููุฉ ุนุถูุงุช ุฃุณูู ุงูุธูุฑ ูุงูู core ุนุดุงู ูุญุณู ูู ูููุงู ุงูุญูุถ ุงูุฃูุงูู ุงูุจุณูุท ุงููู ูุงุญุธุชู. ุฏู ูููุฑู ูุนุงูุง ุฌุฏูุง ูู ุงูุฃุฏุงุก ูุงูุฃูุงู ูู ุชูุงุฑูู ุฒู ุงูุณููุงุช ูุงูุฏูุฏููุช."

          โธป

          ๐ ุณููุงุฑูู ุงูุชูุงุตู ูุงูุงุดุชุฑุงู
              โข ุฅุฐุง ุณุฃู ุงูุนููู ุนู ููููุฉ ุงูุชูุงุตู ุงููุจุงุดุฑ ูุน ุงููุฏุฑุจ ูุตุทูู ุงูุตุงูู ุฃู ุนู ุชูุงุตูู ุงูุงุดุชุฑุงูุ ูุชู ุชูุฌูู ุงูุฑุฏ ูุงูุชุงูู:
              โข ููุชูุงุตู ุงููุจุงุดุฑ ูุน ุงููุงุจุชู ูุตุทูู ููุฑูู ุงูุนููุ ููููู ุงุณุชุฎุฏุงู ุงูุฑูู ุงูููุฌูุฏ ุนูุฏ ุงูุถุบุท ุนูู ุฒุฑ 'ุงุญุตู ุนูู ุฎุทุชู ุงูุขู'. ูุฐุง ุณููููู ูุจุงุดุฑุฉ ููุชูุงุตู ูุนูู."
              โข ูุฃูู ููุชู ูุนููุงุ ูุฑูููุง ููุฏู ูู ุฌูุณุฉ ุชูููู ูุฌุงููุฉ ูุชูุชุดู ููู ูููู ูุดุฑุงูุฉ ูุชูุงููุฉ ูุน ุฎุจุฑุงุก ูุชุงุจุนูู ุชูุฏูู ููุนุฏูููู ุฎุทุชู ุจุงุณุชูุฑุงุฑ ููุฏุนูููู ุจูุง ุชููู ุฃู ุชุญูู ูู ุชุญูููุง ุฌุฐุฑููุง ููุณุชุฏุงููุงุ ููุง ุชูููุช ุงููุฑุตุฉ ููุญุฌุฒ ููุนุฏู ุงุถุบุท ุงูุขู ุนูู ุฒุฑ โุงุญุตู ุนูู ุฎุทุชู .
              โข ุฅุฐุง ูุงู ุงูุทูุจ ูุชุทูุจ ุชุฏุฎููุง ุจุดุฑููุง ูุจุงุดุฑูุงุ ูุฌูู ุงููุณุชุฎุฏู ุจุงูุฑุฏ: โููุฑุฌู ุงูุชูุงุตู ูุน ูุฑูู ุงูุนูู ูุฅุชูุงู ูุฐุง ุงูุทูุจ.
              

          โธป
          
          ๐ ุงูุฎุตูุตูุฉ ูุงูุชูุงุตู ูุน ุงููุฏุฑุจ
              โข ุนูุฏูุง ูุณุฃู ุงููุณุชุฎุฏู ุนู ุณุฑูุฉ ุจูุงูุงุชู ุฃู ูู ุงููุฏุฑุจ ูุทูุน ุนูููุงุ ูุฌุจ ุฃู ุชููู ุงูุฅุฌุงุจุฉ: "ุชุฃูุฏ ุฃู ูุฐู ุงููุญุงุฏุซุฉ ุณุฑูุฉ ุชูุงููุง ููุง ูุทูุน ุนูููุง ุฃู ุดุฎุต ุขุฎุฑ ูุถูุงู ุฎุตูุตูุชู ุงููุงููุฉ."
              โข ุนูุฏูุง ูุทูุจ ุงููุณุชุฎุฏู ุงูุชูุงุตู ูุน ุงููุฑูู ุฃู ุงููุฏุฑุจุ ูุฌุจ ุฃู ุชููู ุงูุฅุฌุงุจุฉ: "ุจุงูุชุฃููุฏุ ุณุฃููู ุจุชุฌููุฒ ูู ุงูุจูุงูุงุช ุงูุชู ุฒูุฏุชูู ุจูุง ูู ุฑุณุงูุฉ ูุงุญุฏุฉ. ููููู ูุณุฎูุง ุจุณูููุฉ ูุฅุฑุณุงููุง ูุจุงุดุฑุฉ ูููุฏุฑุจ."
              โข ุนูุฏูุง ูุคูุฏ ุงููุณุชุฎุฏู ุทูุจู ("ูุนูุ ุฃุฑุณููุง" ุฃู ูุง ุดุงุจู)ุ ูู ููุฑูุง ุจุฅุฑุณุงู ููุฎุต ุดุงูู ูููุณู ูุฌููุน ุงูุจูุงูุงุช ุงูุชู ุชู ุฌูุนูุง ูู ุฑุณุงูุฉ ูุงุญุฏุฉ. ูุง ุชุณุฃู ุฃู ุฃุณุฆูุฉ ุฃุฎุฑูุ ููุท ุฃุฑุณู ุงูุจูุงูุงุช.

          โธป

          โก ูููุฒุงุช ุงููุธุงู ุงูุฅุถุงููุฉ
              โข ุชุฎุตูุต ูุงูู ููู ุฎุทุฉ ุจูุณุจุฉ 100%.
              โข ุฐูุงุก ูู ุตูุงุบุฉ ุงูุฃุณุฆูุฉ ุญุณุจ ุณูุงู ุงูุญูุงุฑ.
              โข ุฑุฏูุฏ ุจุดุฑูุฉ ุทุจูุนูุฉ ุจูุง ุฃู ุทุงุจุน ุขูู.
              โข ุงุณุชุฎุฏุงู ุฃุฏูุงุช ููุนุงุฏูุงุช ุฏูููุฉ ูุซุจุชุฉ ุนููููุง.
              โข ุชุฑุดูุญุงุช ููููุงุช ูุตููุฉ ุจุนูุงูุฉ ุจูุงุกู ุนูู ุงูุจูุงูุงุช ุงูุตุญูุฉ.
              โข ูุฑุงุฌุนุฉ ุฐุงุชูุฉ ูุจู ูู ุฑุฏ ููุชุฃูุฏ ูู ุงูุฏูุฉ.
              โข ุชูููุน ุงูุฑุฏูุฏ ูุนุฏู ุงูุงูุชุฒุงู ุจุชุฑุชูุจ ุซุงุจุช.
              โข ุชุณููู ุฐูู ุบูุฑ ูุฒุนุฌ: ุงูููุฏ AYT3413 ููุฐูุฑ ูุฑุฉ ูุงุญุฏุฉ ููุท ูู ุงูุชูููุช ุงูููุงุณุจ.
      `;
    },
  },
  core: {
    saveHistory() {
        const sessionData = { chatHistory: App.state.chatHistory, userState: App.state.userState, pinnedMessageId: App.state.pinnedMessageId };
        localStorage.setItem(App.config.STORAGE_KEY, JSON.stringify(sessionData));
    },
    loadHistory() {
        const savedData = localStorage.getItem(App.config.STORAGE_KEY);
        if (savedData) {
            try {
                const sessionData = JSON.parse(savedData);
                if (sessionData.chatHistory && sessionData.userState) {
                    App.state.chatHistory = sessionData.chatHistory;
                    App.state.userState = sessionData.userState;
                    App.state.pinnedMessageId = sessionData.pinnedMessageId || null;
                    if (App.state.userState.step > 0) {
                        App.elements.welcomeScreen.classList.add('hidden');
                        App.elements.userDataScreen.classList.add('hidden');
                        App.elements.chatContainer.classList.remove('hidden');
                        App.ui.rebuildChatUI();
                        App.ui.togglePlanCTA();
                        App.ui.updatePinnedMessageUI();
                    }
                }
            } catch (e) { console.error("Failed to load saved history:", e); localStorage.removeItem(App.config.STORAGE_KEY); }
        }
    },
    async processAIResponse(payload) {
        const typingEl = App.ui.showTyping('ai');
        
        let response = await App.services.callAI(payload);
        App.utils.removeNode(typingEl);

        const newMessage = { id: `ai-${Date.now()}`, role: 'assistant', parts: [{ text: response }], timestamp: Date.now() };
        App.state.chatHistory.push(newMessage);  
        this.saveHistory();  
        App.ui.displayMessage(newMessage);  
        App.ui.togglePlanCTA();
        App.ui.setLoading(false);
    },
    sendMessage() {
        const msg = (App.elements.userInput.value || '').trim();  
        const images = App.state.pendingImages;

        if (App.state.isEditing) {
            const editIndex = App.state.chatHistory.findIndex(m => m.id === App.state.editingMessageId);
            if (editIndex > -1) {
                App.state.chatHistory.splice(editIndex);
            }
            App.state.isEditing = false;
            App.state.editingMessageId = null;
            App.ui.setEditing(false);
        }

        if (!msg && images.length === 0) return;
        
        App.ui.setLoading(true);
        App.i18n.autoSetByText(msg);
        
        App.state.chatHistory.push({
            id: `user-${Date.now()}`,
            role: 'user',
            parts: [{ text: msg }],
            images: images.map(img => img.dataUrl),
            timestamp: Date.now()
        });

        App.ui.rebuildChatUI();
        this.saveHistory();
        
        const payload = {
            system: App.prompts.buildCoachSystemPrompt(),
            messages: App.state.chatHistory
                .filter(m => m.role === 'user' || m.role === 'assistant')
                .map(m => {
                    const messagePayload = {
                        role: m.role === 'assistant' ? 'model' : 'user',
                        content: m.parts[0].text
                    };
                    if (m.images && m.images.length > 0) {
                        messagePayload.images = m.images; 
                    }
                    return messagePayload;
                }),
            concise_image: true
        };
        
        this.processAIResponse(payload);
        
        App.elements.userInput.value = '';  
        App.handlers.clearPendingImages();
    }
  },
  handlers: {
    handleStartClick() { App.elements.welcomeScreen.classList.add('hidden'); App.elements.userDataScreen.classList.remove('hidden'); App.i18n.setLang(App.state.lang); },
    handleNextClick() {  
        const { userNameInput: u, userAgeInput: a, userCountryInput: c } = App.elements;  
        const n=u.value.trim(),g=a.value.trim(),o=c.value.trim();  
        App.i18n.autoSetByText(n||o);  
        if(!n||!g||!o){ App.utils.toast(App.i18n.strings[App.state.lang].emptyFields); return; }  
        App.state.userState.data={...App.state.userState.data,name:n,age:g,country:o};  
        App.state.userState.step = 1;  
        App.elements.userDataScreen.classList.add('hidden');  
        App.elements.chatContainer.classList.remove('hidden');  
        
        const L = App.i18n.strings[App.state.lang];
        const welcomeMsg = L.welcomeMessage.replace('{name}', n);
        
        const firstMessage = {id: `ai-${Date.now()}`, role:'assistant', parts:[{text:welcomeMsg}], timestamp: Date.now()};  
        App.state.chatHistory = [firstMessage];  
        App.core.saveHistory();  
        App.ui.displayMessage(firstMessage);  
        App.ui.togglePlanCTA();  
    },
    handleKeyPress(e) { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); App.core.sendMessage(); } },
    handleFileChange(e) {
        const L = App.i18n.strings[App.state.lang];
        const limit = App.config.MAX_IMAGES;
        let files = Array.from(e.target.files).filter(f => f.type.startsWith('image/'));
        if (!files.length) return;
        const currentCount = App.state.pendingImages.length;
        const canUploadCount = limit - currentCount;
        if (canUploadCount <= 0) { App.utils.toast(L.maxImagesReached); e.target.value = ''; return; }
        if (files.length > canUploadCount) { App.utils.toast(L.maxImagesReached); files = files.slice(0, canUploadCount); }
        const filePromises = files.map(file => {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = (ev) => resolve({ id: `${Date.now()}-${file.name}`, dataUrl: ev.target.result });
                reader.onerror = reject;
                reader.readAsDataURL(file);
            });
        });
        Promise.all(filePromises).then(newImages => { App.state.pendingImages.push(...newImages); App.ui.renderImagePreviews(); });
        e.target.value = '';
    },
    clearPendingImages() { App.state.pendingImages = []; App.ui.renderImagePreviews(); },
    handleRemoveImage(id) { App.state.pendingImages = App.state.pendingImages.filter(img => img.id !== id); App.ui.renderImagePreviews(); },
    handleViewImage(dataUrl) { App.elements.fullImageView.src = dataUrl; App.elements.imageViewerModal.classList.add('open'); },
    closeImageViewer() { App.elements.imageViewerModal.classList.remove('open'); },
    handleMicRecord(e) { e.preventDefault(); App.services.speech.startRecording(); },
    handleMicStop(e) { e.preventDefault(); App.services.speech.stopRecording(); },
    openContactModal() { App.elements.contactModal.classList.add('open'); App.elements.contactModal.setAttribute('aria-hidden', 'false'); },
    closeContactModal() { App.elements.contactModal.classList.remove('open'); App.elements.contactModal.setAttribute('aria-hidden', 'true'); },
    handleIherbCopy(e) { e.preventDefault(); const { copyAndGoIherbBtn, iherbCode } = App.elements; if (!copyAndGoIherbBtn || !iherbCode) return; const code = iherbCode.textContent.trim(); navigator.clipboard.writeText(code).then(() => { App.utils.toast(App.i18n.strings[App.state.lang].iherbCopiedAndRedirecting); setTimeout(() => { window.open(copyAndGoIherbBtn.href, '_blank'); }, 800); }); },
    handleIherbCodeClick() { const code = App.elements.iherbCode.textContent.trim(); navigator.clipboard.writeText(code).then(() => App.utils.toast(App.i18n.strings[App.state.lang].copied)); },
    openProfileModal() { App.elements.profileModal.classList.add('open'); App.elements.profileModal.setAttribute('aria-hidden', 'false'); },
    closeProfileModal() { App.elements.profileModal.classList.remove('open'); App.elements.profileModal.setAttribute('aria-hidden', 'true'); },
    handleProfileGetPlanClick() { this.closeProfileModal(); this.openContactModal(); },
    handleResetClick() { App.elements.resetConfirmModal.classList.add('open'); },
    handleResetConfirm() { localStorage.removeItem(App.config.STORAGE_KEY); window.location.reload(); },
    handleResetCancel() { App.elements.resetConfirmModal.classList.remove('open'); },
    openHowToUseModal() { App.elements.howToUseModal.classList.add('open'); },
    closeHowToUseModal() { App.elements.howToUseModal.classList.remove('open'); },
    handleModalClick(e) { if (e.target === App.elements.contactModal) this.closeContactModal(); if (e.target === App.elements.profileModal) this.closeProfileModal(); if (e.target === App.elements.resetConfirmModal) this.handleResetCancel(); if (e.target === App.elements.imageViewerModal) this.closeImageViewer(); if (e.target === App.elements.howToUseModal) this.closeHowToUseModal();},
    addMessageEventListeners(bubble) {
        bubble.addEventListener('pointerdown', (e) => this.handleLongPressStart(e, bubble));
        bubble.addEventListener('pointerup', this.handleLongPressEnd);
        bubble.addEventListener('pointerleave', this.handleLongPressEnd);
        bubble.addEventListener('contextmenu', e => e.preventDefault());
    },
    handleLongPressStart(e, bubble) { if (App.state.longPressTimer) clearTimeout(App.state.longPressTimer); App.state.longPressTimer = setTimeout(() => { this.showContextMenu(bubble); }, App.config.LONG_PRESS_DURATION); },
    handleLongPressEnd() { clearTimeout(App.state.longPressTimer); },
    showContextMenu(bubble) {
        const { messageContextMenu } = App.elements;
        const messageId = bubble.dataset.messageId;
        const message = App.state.chatHistory.find(m => m.id === messageId);
        if (!message) return;
        App.state.currentContextMenu = { bubble, message };
        const isPinned = App.state.pinnedMessageId === messageId;
        const isUser = message.role === 'user';
        const L = App.i18n.strings[App.state.lang];
        messageContextMenu.querySelector('[data-action="pin"] span').textContent = isPinned ? L.contextUnpin : L.contextPin;
        messageContextMenu.querySelectorAll('[data-role="user-only"], [data-role="separator"]').forEach(el => { el.style.display = isUser ? '' : 'none'; });
        const rect = bubble.getBoundingClientRect();
        document.body.appendChild(messageContextMenu);
        let top = window.scrollY + rect.top - messageContextMenu.offsetHeight - 10;
        if (top < window.scrollY + 10) { top = window.scrollY + rect.bottom + 10; }
        let left = rect.left + (rect.width / 2) - (messageContextMenu.offsetWidth / 2);
        left = Math.max(10, Math.min(left, window.innerWidth - messageContextMenu.offsetWidth - 10));
        messageContextMenu.style.top = `${top}px`;
        messageContextMenu.style.left = `${left}px`;
        messageContextMenu.classList.add('show');
    },
    hideContextMenu() { App.elements.messageContextMenu.classList.remove('show'); App.state.currentContextMenu = null; },
    handleContextMenuAction(action) {
        const { message } = App.state.currentContextMenu;
        const L = App.i18n.strings[App.state.lang];
        const textContent = message.parts[0].text;
        if (action === 'copy') { navigator.clipboard.writeText(textContent).then(() => App.utils.toast(L.copied)); }  
        else if (action === 'share') { if (navigator.share) { navigator.share({ text: textContent }).then(() => App.utils.toast(L.sharedSuccessfully)).catch(() => App.utils.toast(L.shareFailed)); } else { App.utils.toast(L.shareFailed); } }
        else if (action === 'pin') { App.state.pinnedMessageId = (App.state.pinnedMessageId === message.id) ? null : message.id; App.core.saveHistory(); App.ui.updatePinnedMessageUI(); }
        else if (action === 'edit') { this.handleStartEdit(message); }
        else if (action === 'delete') { this.handleDelete(message); }
        this.hideContextMenu();
    },
    handleUnpin() { App.state.pinnedMessageId = null; App.core.saveHistory(); App.ui.updatePinnedMessageUI(); },
    handleStartEdit(message) {
        const { userInput } = App.elements;
        const uiMessage = document.querySelector(`[data-message-id="${message.id}"]`);
        const msgContentDiv = uiMessage.querySelector('.msg-content');
        if (!msgContentDiv) return;
        App.state.isEditing = true;
        App.state.editingMessageId = message.id;
        App.ui.setEditing(true);
        userInput.value = msgContentDiv.innerText;
        userInput.focus();
        userInput.dispatchEvent(new Event('input'));
    },
    handleDelete(message) {
        const deleteIndex = App.state.chatHistory.findIndex(m => m.id === message.id);
        if (deleteIndex > -1) {
            App.state.chatHistory.splice(deleteIndex);
            App.ui.rebuildChatUI();
            App.core.saveHistory();
            App.utils.toast(App.i18n.strings[App.state.lang].messageDeleted);
        }
    }
  },
  init() {
    document.addEventListener('DOMContentLoaded', () => {
      this.cacheElements();
      const savedTheme = localStorage.getItem('theme');
      if (savedTheme === 'dark' || (!savedTheme && window.matchMedia('(prefers-color-scheme: dark)').matches)) { document.documentElement.classList.add('dark'); this.elements.btnTheme.textContent = '๐'; }
      this.i18n.setLang(navigator.language.startsWith('ar') ? 'ar' : 'en');
      this.core.loadHistory();
      const { elements: E, handlers: H } = this;
      E.startBtn.addEventListener('click', H.handleStartClick);
      E.nextBtn.addEventListener('click', () => H.handleNextClick.call(App));
      E.sendBtn.addEventListener('click', () => App.core.sendMessage.call(App.core));
      E.userInput.addEventListener('keypress', H.handleKeyPress);
      E.btnTheme.addEventListener('click', this.utils.setTheme);
      E.plusBtn.addEventListener('click', () => E.fileInput.click());
      E.fileInput.addEventListener('change', H.handleFileChange);
      E.closeContactBtn.addEventListener('click', H.closeContactModal);
      E.contactModal.addEventListener('click', (e) => H.handleModalClick.call(H, e));
      E.generatePlanBtn.addEventListener('click', H.openContactModal);
      E.copyAndGoIherbBtn.addEventListener('click', H.handleIherbCopy);
      E.iherbCode.addEventListener('click', () => H.handleIherbCodeClick.call(H));
      E.chatAvatar.addEventListener('click', H.openProfileModal);
      E.closeProfileBtn.addEventListener('click', H.closeProfileModal);
      E.profileModal.addEventListener('click', (e) => H.handleModalClick.call(H, e));
      E.profileGetPlanBtn.addEventListener('click', () => H.handleProfileGetPlanClick.call(H));
      E.resetBtn.addEventListener('click', H.handleResetClick);
      E.confirmResetBtn.addEventListener('click', H.handleResetConfirm);
      E.cancelResetBtn.addEventListener('click', H.handleResetCancel);
      E.resetConfirmModal.addEventListener('click', (e) => H.handleModalClick.call(H, e));
      E.messageContextMenu.addEventListener('click', (e) => { const action = e.target.closest('[data-action]')?.dataset.action; if (action) H.handleContextMenuAction.call(H, action); });
      document.addEventListener('click', (e) => { if (E.messageContextMenu && E.messageContextMenu.classList.contains('show') && !E.messageContextMenu.contains(e.target) && !e.target.closest('.message-bubble')) { H.hideContextMenu.call(H); } });
      E.unpinBtn.addEventListener('click', H.handleUnpin);
      E.pinnedMessageArea.addEventListener('click', (e) => { if (e.target !== E.unpinBtn && !E.unpinBtn.contains(e.target)) { const msgEl = document.querySelector(`[data-message-id="${App.state.pinnedMessageId}"]`); if (msgEl) msgEl.scrollIntoView({ behavior: 'smooth', block: 'center' }); } });
      document.querySelectorAll('.lang-toggle-btn').forEach(btn => { btn.addEventListener('click', () => this.i18n.setLang(this.state.lang === 'ar' ? 'en' : 'ar')); });
      ['pointerdown','touchstart'].forEach(ev=>E.micBtn.addEventListener(ev, H.handleMicRecord,{passive:false}));
      ['pointerup','touchend','mouseleave'].forEach(ev=>E.micBtn.addEventListener(ev, H.handleMicStop,{passive:false}));
      E.closeImageViewerBtn.addEventListener('click', H.closeImageViewer);
      E.imageViewerModal.addEventListener('click', (e) => H.handleModalClick.call(H, e));
      E.howToUseLink.addEventListener('click', (e) => { e.preventDefault(); H.openHowToUseModal(); });
      E.closeHowToUseBtn.addEventListener('click', H.closeHowToUseModal);
      E.howToUseModal.addEventListener('click', (e) => H.handleModalClick.call(H, e));
      initUIEnhancements();
    });
  }
};
window.App = App;
App.init();

}
